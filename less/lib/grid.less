@columns-max: 12;

// Variable used to define the amount of page-gutter
// Usage: (on main page content container)
// margin: 0 @page-gutter;
@page-gutter: 100% / (@columns-max + 2);
@component-gutter: 12px;

#grid {
    // # Variables
    // ==================================================

    // Define the max # of columns for the grid (default is 12)
    // Used to calculate column widths for .column mixin


    // # 12 Column Widths Reference
    // ==================================================
    //
    // This sets fluid width for containing elements using 12 columns.
    //
    //  1 column(s)  =  8.3333333%
    //  2 column(s)  =  16.666666%
    //  3 column(s)  =  25%
    //  4 column(s)  =  33.3333333%
    //  5 column(s)  =  41.6666666%
    //  6 column(s)  =  50%
    //  7 column(s)  =  58.3333333%
    //  8 column(s)  =  66.6666666%
    //  9 column(s)  =  75%
    //  10 column(s) =  83.3333333%
    //  11 column(s) =  91.6666666%
    //  12 column(s) =  100%
    // ############################


    // # Local Mixins
    // ==================================================

    // Box sizing, because border-box used for columns
    .box-sizing(@box-sizing: border-box) {
      -webkit-box-sizing: @box-sizing;
      -moz-box-sizing: @box-sizing;
      -o-box-sizing: @box-sizing;
      -ms-box-sizing: @box-sizing;
      box-sizing: @box-sizing;
    }



    // # Grid Mixins
    // ==================================================

    // Using floats
    .column(@columns) {
        .column(float, @columns);
		margin: .5em 0;
    }

    .column(float, @columns) {
        .column(left, @columns);
    }

    .column(left, @columns) {
        float: left;
    }

    .column(right, @columns) {
        float: right;
    }

    // Using inline-block
    .column(inline, @columns) {
        display: inline-block;

        // For IE 7
        zoom: 1;
        *display: inline;
    }

    // Setting width, and border-box
    .column(@_, @columns) {
        // Round with to the thousands pixels
		// width: @columns;
		// width: @columns / @columns-max;
		// width: @columns / @columns-max * 100%;
        width: round(@columns / @columns-max * 100%, 3);
        .box-sizing(border-box);

        // For blank columns
        &.blank:after {
            display: block;
            visibility: hidden;
            content: ".";
        }
    }

    // Offsetting the column a number of columns to the right
    .column-offset(@columns, @columns-offset) {
        .column-offset(float, @columns, @columns-offset);
    }

    .column-offset(@_, @columns, @columns-offset) {
        .column(@_, @columns);
        margin-left: (round(@columns / @columns-max * 100%, 3) * @columns-offset);
    }
}

.span1{
    #grid .column(3);
    padding: 0 @component-gutter;
    margin: 0;

    &.ng{
        padding: 0;
    }

    @media screen and (max-width: 650px){
        #grid .column(6);
    }

    @media screen and (max-width: 300px){
        #grid .column(12);
    }
}

.span2{
    #grid .column(6);
    padding: 0 @component-gutter;
    margin: 0;

    &.ng{
        padding: 0;
    }
    @media screen and (max-width: 650px){
        #grid .column(12);
    }
}

.span3{
    #grid .column(9);
    padding: 0 @component-gutter;
    margin: 0;

    &.ng{
        padding: 0;
    }
   @media screen and (max-width: 650px){
        #grid .column(12);
    }
}

.span4{
    #grid .column(12);
    padding: 0 @component-gutter;
    margin: 0;
    
    &.ng{
        padding: 0;
    }
}